- Инструкция по локальному запуску проекта

# 1. Клонирование проекта
git clone https://github.com/maxter9595/EngStudyBot.git
cd EngStudyBot

# 2. Установка ТГ-токена в качестве переменной окружения (Git Bash):
cp .env_example .env && sed -i "s/your_token/ВАШ_НОВЫЙ_ТОКЕН/g" .env
cp .env_example .env && sed -i "s/your_token/7076512254:AAHwldFRsqwr3rAdEiCEOmSF-zoFFIjFtO4/g" .env

# 3. Запуск Docker
* Запуск Docker Desktop
docker compose build
docker compose up -d

# 4. Тестирование приложения
* docker-compose ps
* docker-compose run test

# 5. Настройка админской панели СУБД PostgreSQL
http://localhost:5050/

Почта: admin@example.com
Пароль: admin

Server: my_server
Host: db
Port: 5432
Maintenance database: EngStudyBot
Username: postgres
Password: postgres

# 6. Смотрим на чат-бота
https://web.telegram.org/a/#7076512254

#################
- Инструкция по деплою проекта на сервере
#################

# 1. Покупка сервера и подключение к нему

- Рег.RU - Облачный сервер с предустановленным Docker: https://www.reg.ru/cloud/docker

- Предустановленный Docker: да 
- Образ: Ubuntu
- Тарифы и конфигурации: производительный
- Тариф: HP C2-M2-D40
- Регион размещения: Москва
- Плавающий (публичный) IP-адрес: да
- Резервное копирование: да

- Вход на сервер после его приобретения:
# Входим по IP и паролю, выданными на почту
ssh root@79.174.95.199
# JSyvVM6pIIqT8AEJ

# 2. Подготовка сервера для деплоя

- Создание пользователя и добавление его в группу sudo:
adduser myappuser
usermod -aG sudo myappuser

- Установка зависимостей:
apt update && apt upgrade -y
apt install -y git nginx ufw

- Настройка firewall:
sudo ufw allow 5432
sudo ufw allow 5050
sudo ufw allow 22
ufw allow 80
ufw enable

- Запуск Docker:
systemctl enable docker
systemctl start docker

- Добавление пользователя в группу docker и его переподключение на сервер для утверждения прав:
usermod -aG docker myappuser
exit

# Входим по паролю, заданному пользователю через adduser myappuser
ssh myappuser@79.174.95.199

# 3. Клонирование репозитория. Подготовка переменных окружения
git clone https://github.com/maxter9595/EngStudyBot.git
cd EngStudyBot

cp .env_example .env && sed -i "s/your_token/ВАШ_НОВЫЙ_ТОКЕН/g" .env

# 4. Запуск Docker
- Сборка и запуск Docker-сервисов:
docker compose build
docker compose up -d

- Проверка наличия Docker контейнеров и запуск тестов:
docker compose ps
docker compose run test

# 5. Настройка админской панели СУБД PostgreSQL
http://79.174.95.199:5050/

Почта: admin@example.com
Пароль: admin

Server: my_server
Host: db
Port: 5432
Maintenance database: EngStudyBot
Username: postgres
Password: postgres

# 6. Смотрим на чат-бота
https://web.telegram.org/a/#7076512254

#################
- Настройка автодеплоя проекта (CI/CD)
#################

# 1. Генерация SSH-ключа на локальном ПК
- Генерация SSH-ключа на локальном ПК:
  ssh-keygen -t ed25519 -C "max.t95@bk.ru"

- Вывод SSH-ключа из локального ПК для копирования:
  type $env:USERPROFILE\.ssh\id_ed25519.pub

ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHHdS+nkr0Z0T4LxMq1L2WQf+EzzhGZavXbsloWGRVON max.t95@bk.ru

# 2. Генерация SSH-ключа на сервере
- Вход на сервер:
  ssh myappuser@79.174.95.199

- Генерация SSH-ключа на сервере:
  ssh-keygen -t ed25519 -C "max.t95@bk.ru"

- Вывод SSH-ключа из сервера для просмотра:
  ssh-keygen -y -f ~/.ssh/id_ed25519

ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDXOZAqE8vHPTGNazCUWwqS47XyxJ45xhVC0H/i0znv5 max.t95@bk.ru

# 3. Добавление SSH-ключей из локального ПК и сервера в список авторизованных ключей сервера

- Ввод SSH-ключа из сервера в список авторизированных ключей:
  ssh-keygen -y -f ~/.ssh/id_ed25519 >> ~/.ssh/authorized_keys

- Ввод SSH-ключа из локального ПК в список авторизированных ключей:
  echo "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHHdS+nkr0Z0T4LxMq1L2WQf+EzzhGZavXbsloWGRVON max.t95@bk.ru" >> ~/.ssh/authorized_keys

- Просмотр списка авторизированных ключей:
  cat ~/.ssh/authorized_keys
  ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHHdS+nkr0Z0T4LxMq1L2WQf+EzzhGZavXbsloWGRVON   max.t95@bk.ru
  ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDXOZAqE8vHPTGNazCUWwqS47XyxJ45xhVC0H/i0znv5 max.t95@bk.ru

# 4. Настройка sudo без пароля для CI/CD
  - Настройка прав для authorized_keys:
    chmod 600 ~/.ssh/authorized_keys 
    chmod 700 ~/.ssh

- Вход в visudo и добавление параметров для обхода паролей пользователя при деплое:
    sudo visudo

    # Добавляем в конце файла следующее:
    myappuser ALL=(ALL) NOPASSWD: ALL


- Выход из сервера и проверка входа на сервер без пароля:
  exit
  ssh myappuser@79.174.95.199

# 5. Привязка SSH-ключа к GitHub
- Вывод публичного SSH-ключа для взаимодействия с GitHub:
  cat ~/.ssh/id_ed25519.pub

  # Копируем все, что будет выведено
  ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDXOZAqE8vHPTGNazCUWwqS47XyxJ45xhVC0H/i0znv5 max.t95@bk.ru

Настройка публичного ключа к GitHub:

Сайт GitHub → Settings → SSH and GPG keys → New SSH key. Заполняем параметры SHH-ключа:

Тип ключа: Authentication Key

Имя ключа: VM-server

В поле Key добавляем содержимое SSH-ключа. Пример - ssh-ed25519 AAAA...rx max.t95@bk.ru

После добавления параметров SSH-ключа нажимаем Add SSH key


# 6.Настройка файла SSH-конфигурации. Проверка подключения к GitHub
- Внесение GitHub в список известных хостов сервера:
ssh-keyscan -H github.com >> ~/.ssh/known_hosts

- Настройка конфигурации для SSH:
nano ~/.ssh/config

----- ~/.ssh/config -----
Host github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_ed25519
----- ~/.ssh/config -----

- Задание прав для файла SSH-конфигурации:
chmod 600 ~/.ssh/config

- Проверка взаимодействия с GitHub:
ssh -T git@github.com
# Если всё ок — увидим это сообщение:
# Hi <логин>! You've successfully authenticated ...

# 7. Ввод команды на сервере для получения SSH_PRIVATE_KEY:
cat ~/.ssh/id_ed25519

# Копируем все вместе с комментариями BEGIN и END
-----BEGIN OPENSSH PRIVATE KEY----- 
b3...= 
-----END OPENSSH PRIVATE KEY-----


Ввод secrets для автодеплоя GitHub-репозитория:
- SSH_HOST: 95.163.220.37 (или другой IP-адрес сервера)
- SSH_USER: myappuser
- SSH_PRIVATE_KEY: результат команды cat ~/.ssh/id_ed25519 на сервере
- TG_TOKEN: Telegram-токен

После установки secrets проверяем функционал автодеплоя
Слово должно содержать только английские буквы 
