import os
import re
import random
from typing import Optional
from string import ascii_letters

import telebot
from telebot import TeleBot, types
from telebot.asyncio_handler_backends import StatesGroup, State

from filefinder import find_folder


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


class States(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


class Functionality:

    def setup_buttons(self, target_word: str, others: list) -> tuple:

        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–ª–∞–≤–∏—à–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á–∞—Ç-–±–æ—Ç–∞ Telegram.

        –í–≤–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - target_word: —Ü–µ–ª–µ–≤–æ–µ —Å–ª–æ–≤–æ
        - others: —Å–ø–∏—Å–æ–∫ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏

        –í—ã–≤–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - (buttons, markup): –∫–æ—Ä—Ç–µ–∂ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏, –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—â–∏–º–∏ –∫–ª–∞–≤–∏—à–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.
            -- buttons: —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ KeyboardButton, –æ—Ç—Ä–∞–∂–∞—é—â–∏—Ö –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å
                        –∫–ª–∞–≤–∏—à –∫ —Ç–æ–º—É –∏–ª–∏ –∏–Ω–æ–º—É –≤—ã–±–æ—Ä–æ—á–Ω–æ–º—É –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —Å–ª–æ–≤—É.
            -- markup: –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ ReplyKeyboardMarkup, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ
                       —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –æ—Ç–∫–ª–∏–∫ –Ω–∞ –µ–µ –Ω–∞–∂–∞—Ç–∏–µ.
        """

        target_word_btn = [types.KeyboardButton(target_word)]

        other_words_btns = []
        for word in others:
            other_words_btns.append(
                types.KeyboardButton(word)
            )

        buttons = target_word_btn + other_words_btns
        random.shuffle(buttons)

        buttons.extend([
            types.KeyboardButton(Command.NEXT),
            types.KeyboardButton(Command.ADD_WORD),
            types.KeyboardButton(Command.DELETE_WORD)
        ])

        markup = types.ReplyKeyboardMarkup(row_width=2)
        markup.add(*buttons)

        return buttons, markup

    def get_cmd_names(self) -> tuple:

        """
        –í—ã–≤–æ–¥–∏—Ç –∫–æ—Ä—Ç–µ–∂ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥,
        —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –∫–ª–∞—Å—Å–µ Command.

        –í—ã–≤–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - –∫–æ—Ä—Ç–µ–∂ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
            -- add_btn_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏, –æ—Ç–≤–µ—á–∞—é—â–µ–π –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞.
            -- delete_btn_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏, –æ—Ç–≤–µ—á–∞—é—â–µ–π –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞.
            -- next_btn_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏, –æ—Ç–≤–µ—á–∞—é—â–µ–π –∑–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤.
        """

        add_btn_name = Command.ADD_WORD.lower()
        delete_btn_name = Command.DELETE_WORD.lower()
        next_btn_name = Command.NEXT.lower()

        return add_btn_name, delete_btn_name, next_btn_name

    def get_example(self, bot: TeleBot, message: telebot.types.Message,
                    markup: telebot.types.ReplyKeyboardMarkup,
                    data: dict, hint: str) -> None:

        """
        –í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —á–∞—Ç–µ Telegram.

        –í–≤–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - bot: –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ TeleBot, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
              —á–∞—Ç-–±–æ—Ç–∞ Telegram (–Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥—Ä.).
        - message: –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Message, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
                  ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
        - markup: –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ ReplyKeyboardMarkup, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ
                 —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –æ—Ç–∫–ª–∏–∫ –Ω–∞ –µ–µ –Ω–∞–∂–∞—Ç–∏–µ.
        - data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏, —Ñ–∏–∫—Å–∏—Ä—É–µ–º—ã–º–∏ –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞.
        - hint: —Å—Ç—Ä–æ–∫–∞, –æ—Ç—Ä–∞–∂–∞—é—â–∞—è –æ—Ç–≤–µ—Ç —á–∞—Ç-–±–æ—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ
               –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–ª–æ–≤.
        """

        if '–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!' not in hint:
            if data['en_example'] != 'No example' and \
                    data['ru_example'] != "–ü—Ä–∏–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
                en_example = data["en_example"]
                ru_example = data["ru_example"]

                example_text = self.show_hint(
                    '*–ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:*',
                    f'"{en_example}"',
                    f'"{ru_example}"'
                )

                bot.send_message(
                    chat_id=message.chat.id,
                    text=example_text,
                    reply_markup=markup,
                    parse_mode='Markdown'
                )

    def get_mp3_audio(self, bot: TeleBot, data: dict, hint: str,
                      message: telebot.types.Message) -> None:

        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç MP3-—Ñ–∞–π–ª –≤ —á–∞—Ç–µ Telegram.

        –í–≤–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - bot: –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ TeleBot, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≤—ã–ø–æ–ª–Ω—è—Ç—å
               —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á–∞—Ç-–±–æ—Ç–∞ Telegram (–Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥—Ä.).
        - data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏, —Ñ–∏–∫—Å–∏—Ä—É–µ–º—ã–º–∏ –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞.
        - hint: —Å—Ç—Ä–æ–∫–∞, –æ—Ç—Ä–∞–∂–∞—é—â–∞—è –æ—Ç–≤–µ—Ç —á–∞—Ç-–±–æ—Ç–∞ –Ω–∞
                –≤—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–ª–æ–≤.
        - message: —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–∞, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ç–æ—Ä–æ–≥–æ
                   –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è MP3-—Ñ–∞–π–ª.
        """

        if '–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!' not in hint:
            word = data['target_word']
            transcription = data['transcription']

            if transcription.split():
                mp3_name = f"{word} {transcription}.mp3"
            else:
                mp3_name = f"{word}"[::-1]. \
                               replace(" ", "", 1)[::-1] + '.mp3'

            mp3_path = os.path.join(
                find_folder('eng_audio_files_mp3'),
                mp3_name
            )

            try:
                bot.send_audio(
                    chat_id=message.chat.id,
                    audio=open(mp3_path, 'rb'),
                    title=f"{mp3_name}",
                    performer="Translator"
                )
                print(f'MP3 —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {mp3_path}')
            except FileNotFoundError:
                print(f'–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å —Å–ª–æ–≤–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏: {mp3_path}')

    def check_word_letters(self, word: str, eng_bool: bool = True) -> bool:

        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö/—Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–º
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–æ –≤—Ä–µ–º—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"
        –∏ "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ".

        –í–≤–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - word: —Å–ª–æ–≤–æ, —Ç—Ä–µ–±—É–µ—â–µ–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞
                –Ω–∞–ª–∏—á–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö/—Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤.
        - eng_bool: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±—É–ª–µ–≤–∞ —Ç–∏–ø–∞, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞
                    –≤—ã–±–æ—Ä –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏–ª–∏ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞.
            -- True: –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞.
            -- False: –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞.

        –í—ã–≤–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä:
        - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±—É–ª–µ–≤–∞ —Ç–∏–ø–∞, –æ—Ç—Ä–∞–∂–∞—é—â–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (True)
          –∏–ª–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (False) —Å–ª–æ–≤–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
          –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö/—Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤.
        """

        if eng_bool:
            letter_condition = lambda letter:\
                letter in ascii_letters
        else:
            letter_condition = lambda letter:\
                re.match('[–∞-—è–ê-–Ø—ë–Å]', letter)

        for letter in word:
            if letter.isalpha() and\
                    letter_condition(letter):
                continue
            else:
                return False
        return True

    def get_random_words(self, pos_database: list) -> Optional[tuple]:

        """
        –í—ã–±–∏—Ä–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ.

        –í–≤–æ–¥–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä:
        - pos_database: —Å–ø–∏—Å–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤,
                        –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –∫ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        Telegram –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —á–∞—Å—Ç–∏ —Ä–µ—á–∏.

        –í—ã–≤–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - tuple: –∫–æ—Ä—Ç–µ–∂ —Å –¥–∞–Ω–Ω—ã–º–∏.
            -- target_word: —Ü–µ–ª–µ–≤–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                            —É–≥–∞–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–∞—Ç-–±–æ—Ç–∞ Telegram.
            -- translate: –ø–µ—Ä–µ–≤–æ–¥ —Ü–µ–ª–µ–≤–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ target_word.
            -- other_words: —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤, —è–≤–ª—è—é—â–∏—Ö—Å—è
                            –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞. –í—ã–±–∏—Ä–∞—é—Ç—Å—è
                            —Ä–∞–Ω–¥–æ–º–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
            -- transcription: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ target_word.
            -- en_example: –ø—Ä–∏–º–µ—Ä –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
                           —Ü–µ–ª–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ target_word.
            -- ru_example: –ø—Ä–∏–º–µ—Ä —Ä—É—Å—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
                           –ø–µ—Ä–µ–≤–æ–¥–∞ translate.
        """

        total_words = len(pos_database)

        if total_words >= 4:
            target_idx = random.randint(1, total_words)
            target_dict = pos_database[target_idx]
            target_word = target_dict.get('en_word')

            other_words = []
            while len(other_words) < 3:
                other_idx = random.randint(1, total_words)

                if other_idx != target_idx:
                    other_word = pos_database[other_idx].get('en_word')

                    if other_word != target_word:
                        other_words.append(other_word)

            ru_translation = target_dict.get('ru_word')
            transcription = target_dict.get('en_trans')
            en_example = target_dict.get('en_example')
            ru_example = target_dict.get('ru_example')

            return (target_word, ru_translation, other_words,
                    transcription, en_example, ru_example)

    def show_hint(self, *lines: str) -> str:

        """
        –í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ —á–∞—Ç Telegram –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
        –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        —á–∞—Ç-–±–æ—Ç–∞ Telegram (–≤—ã–±–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞,
        –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î).

        –í–≤–æ–¥–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä:
        - lines: —Å–ø–∏—Å–æ–∫, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –í–º–µ—Å—Ç–µ –æ–Ω–∏
                 –æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—é—Ç –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–∞ Telegram.
        """

        return '\n'.join(lines)

    def hello_text(self) -> str:

        """
        –ü–∏—à–µ—Ç –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–∞—Ç-–±–æ—Ç–∞ Telegram
        –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã
        —á–∞—Ç-–±–æ—Ç–∞ Telegram.
        """

        text = """
        –ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.

        –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.

        –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:
        –¥–∞–ª—å—à–µ ‚è≠
        –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,
        —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.

        –ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è
        """

        return '\n'.join(
            line.lstrip() for line in text.splitlines()
        )

    def show_target(self, data: dict) -> str:

        """
        –í—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É "—Ü–µ–ª–µ–≤–æ–µ –∞–Ω–≥–ª. —Å–ª–æ–≤–æ -> –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞" –≤ —á–∞—Ç
        Telegram –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –í–≤–æ–¥–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä:
        - data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏, —Ñ–∏–∫—Å–∏—Ä—É–µ–º—ã–º–∏ –≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞.

        –í—ã–≤–æ–¥–∏–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä:
        - —Å—Ç—Ä–æ–∫–∞, –∏–º–µ—é—â–∞—è —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
          "—Ü–µ–ª–µ–≤–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ -> –ø–µ—Ä–µ–≤–æ–¥ —Ü–µ–ª–µ–≤–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞".
        """

        return f"{data['target_word']} -> {data['translate_word']}"
