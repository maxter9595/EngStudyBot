import random

from telebot.storage import StateMemoryStorage
from telebot import types, TeleBot, custom_filters

from database.repository import DBRepository
from tgbot.parsing import Parsing
from tgbot.functionality import Functionality, Command, States


parsing = Parsing()
functionality = Functionality()
POS_LIST = ['noun', 'verb', 'adjective']


def start_game_handler(bot: TeleBot, repository: DBRepository) -> None:

    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å —á–∞—Ç-–±–æ—Ç–æ–º –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫
    —Å–ª–µ–¥—É—é—â–µ–º—É –≤—ã–±–æ—Ä—É –æ–¥–Ω–æ–≥–æ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.

    - bot: –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ TeleBot, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≤—ã–ø–æ–ª–Ω—è—Ç—å
           —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á–∞—Ç-–±–æ—Ç–∞ Telegram (–Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥—Ä.).
    - repository: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ DBRepository. –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è
                  –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∞—Ç-–±–æ—Ç–∞ Telegram.
    """

    @bot.message_handler(commands=['cards', 'start'])
    def create_cards(message):
        chat_id = message.chat.id
        user_id = message.from_user.id

        user_data = repository.get_users(
            user_id=user_id
        )

        if not user_data:
            bot.send_message(
                user_id,
                functionality.hello_text()
            )

            user_dict = {
                'user_id': user_id,
                'first_name': message.from_user.first_name,
                'last_name': message.from_user.last_name,
                'username': message.from_user.username
            }

            repository.add_user(
                user_dict=user_dict
            )

            repository.prepare_user_word_pairs(
                user_id=user_id
            )

        user_database = repository.get_user_words(
            user_id=user_id,
            pos_name=random.choice(POS_LIST)
        )

        (target_word, translate, others, transcription,
         en_example, ru_example) = functionality.get_random_words(
            pos_database=user_database
        )

        global buttons
        buttons, markup = functionality.setup_buttons(
            target_word=target_word,
            others=others
        )

        bot.send_message(
            chat_id=chat_id,
            text=f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}",
            reply_markup=markup
        )

        bot.set_state(
            user_id=user_id,
            state=States.target_word,
            chat_id=chat_id
        )

        with bot.retrieve_data(user_id, chat_id) as data:
            data['target_word'] = target_word
            data['translate_word'] = translate
            data['other_words'] = others
            data['transcription'] = transcription
            data['en_example'] = en_example
            data['ru_example'] = ru_example

    @bot.message_handler(func=lambda message: message.text == Command.NEXT)
    def next_cards(message):
        create_cards(message)


def delete_word_handler(bot: TeleBot, repository: DBRepository) -> None:

    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª–∏—Ç—å –∏–º–µ—é—â–µ–µ—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    - bot: –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ TeleBot, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≤—ã–ø–æ–ª–Ω—è—Ç—å
           —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á–∞—Ç-–±–æ—Ç–∞ Telegram (–Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥—Ä.).
    - repository: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ DBRepository. –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è
                  –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∞—Ç-–±–æ—Ç–∞ Telegram.
    """

    @bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
    def delete_word(message):
        chat_id = message.chat.id

        send_msg = bot.send_message(
            chat_id=chat_id,
            text="–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
        )

        bot.register_next_step_handler(
            message=send_msg,
            callback=delete_word_callback
        )

    def delete_word_callback(message):
        cid = message.chat.id
        user_id = message.from_user.id
        user_en_word = message.text.lower()
        user_database = repository.get_user_words(user_id=user_id)

        if user_en_word not in functionality.get_cmd_names():
            check_letters_bool = functionality.check_word_letters(
                word=user_en_word,
                eng_bool=True
            )

            if not check_letters_bool:
                bot.send_message(
                    chat_id=cid,
                    text=functionality.show_hint(*[
                        '–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã.',
                        '',
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É',
                        f'{Command.DELETE_WORD.lower()}'])
                )

            else:
                repository.remove_user_word(
                    user_id=user_id,
                    en_word=user_en_word
                )

                new_user_database = repository.get_user_words(
                    user_id=user_id
                )

                if len(new_user_database) == len(user_database):
                    bot.send_message(
                        chat_id=cid,
                        text='–í–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                    )

                else:
                    bot.send_message(
                        chat_id=cid,
                        text=f'–°–ª–æ–≤–æ "{user_en_word}" —É–¥–∞–ª–µ–Ω–æ'
                    )

                    unique_words = repository.get_unique_user_words(
                        user_id=user_id
                    )

                    bot.send_message(
                        chat_id=cid,
                        text=f'–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ - {len(unique_words)} —à—Ç.'
                    )

        else:
            bot.send_message(
                chat_id=cid,
                text=functionality.show_hint(*[
                    '–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞.',
                    f'–ö–æ–º–∞–Ω–¥–∞ {user_en_word} –≤ —Ä–∞—Å—á–µ—Ç –Ω–µ –±–µ—Ä–µ—Ç—Å—è.'])
            )


def add_word_handler(bot: TeleBot, repository: DBRepository) -> None:

    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    - bot: –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ TeleBot, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≤—ã–ø–æ–ª–Ω—è—Ç—å
           —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á–∞—Ç-–±–æ—Ç–∞ Telegram (–Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥—Ä.).
    - repository: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ DBRepository. –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è
                  –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∞—Ç-–±–æ—Ç–∞ Telegram.
    """

    @bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
    def add_word(message):
        cid = message.chat.id

        send_msg = bot.send_message(
            chat_id=cid,
            text="–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:"
        )

        bot.register_next_step_handler(
            message=send_msg,
            callback=add_en_word_callback
        )

    def add_en_word_callback(message):
        cid = message.chat.id
        user_id = message.from_user.id
        user_en_word = message.text.lower()

        if user_en_word not in functionality.get_cmd_names():
            if '‚ùå' not in user_en_word:
                check_letters_bool = functionality.check_word_letters(
                    word=user_en_word,
                    eng_bool=True
                )

                if check_letters_bool:
                    user_database = repository.get_user_words(
                        user_id=user_id
                    )

                    existing_words = repository.get_unique_user_words(
                        user_id=user_id
                    )

                    if user_en_word in existing_words:
                        bot.send_message(
                            chat_id=cid,
                            text='–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                        )

                    else:
                        new_word_info = parsing.get_word_info(
                            en_word=user_en_word,
                            pos_list=POS_LIST,
                            os_='win',
                            browser='chrome'
                        )

                        if new_word_info[0].get('ru_word') is None:
                            data_dict = new_word_info.pop()
                            data_dict['ru_word'] = ''

                            repository.add_user_word(
                                user_id=user_id,
                                data_dict=data_dict
                            )

                            send_msg = bot.send_message(
                                chat_id=cid,
                                text="–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞:"
                            )

                            bot.register_next_step_handler(
                                message=send_msg,
                                callback=add_ru_word_callback
                            )

                        else:
                            for word_dict in new_word_info:
                                repository.add_user_word(
                                    user_id=user_id,
                                    data_dict=word_dict
                                )

                            new_user_database = repository.get_user_words(
                                user_id=user_id
                            )

                            if len(user_database) != len(new_user_database):
                                unique_words = repository.get_unique_user_words(
                                    user_id=user_id
                                )

                                bot.send_message(
                                    chat_id=cid,
                                    text=f'–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ - {len(unique_words)} —à—Ç.'
                                )

                else:
                    bot.send_message(
                        chat_id=cid,
                        text=functionality.show_hint(*[
                            '–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã.',
                            '',
                            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É',
                            f'{Command.ADD_WORD.lower()}'])
                    )

            else:
                bot.send_message(
                    chat_id=cid,
                    text='–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ë–î'
                )

        else:
            bot.send_message(
                chat_id=cid,
                text=functionality.show_hint(*[
                    '–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞.',
                    f'–ö–æ–º–∞–Ω–¥–∞ {user_en_word} –≤ —Ä–∞—Å—á–µ—Ç –Ω–µ –±–µ—Ä–µ—Ç—Å—è.'])
            )

    def add_ru_word_callback(message):
        cid = message.chat.id
        user_id = message.from_user.id
        user_ru_word = message.text.lower()

        user_database = repository.get_user_words(
            user_id=user_id
        )

        last_en_word = user_database[-1].get('en_word')

        data_dict = {
            'en_word': last_en_word,
            'en_trans': '',
            'mp_3_url': '',
            'pos_name': 'unidentified',
            'ru_word': user_ru_word,
            'en_example': '',
            'ru_example': ''
        }

        check_letters_bool = functionality.check_word_letters(
            word=user_ru_word,
            eng_bool=False
        )

        if check_letters_bool:
            repository.add_user_word(
                user_id=user_id,
                data_dict=data_dict
            )

            unique_words = repository.get_unique_user_words(
                user_id=user_id
            )

            bot.send_message(
                chat_id=cid,
                text=f'–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ - {len(unique_words)} —à—Ç.'
            )

        else:
            repository.delete_user_word_pair(
                user_id=message.from_user.id,
                en_word=last_en_word
            )

            repository.delete_word(
                data_dict=data_dict
            )

            bot.send_message(
                chat_id=cid,
                text=functionality.show_hint(*[
                    '–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ —è –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã.',
                    '',
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É',
                    f'{Command.ADD_WORD.lower()}'])
            )


def reply_handler(bot: TeleBot) -> None:

    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤—ã–±–æ—Ä –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–∞—Ç-–±–æ—Ç–∞ Telegram.

    - bot: –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ TeleBot, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≤—ã–ø–æ–ª–Ω—è—Ç—å
           —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á–∞—Ç-–±–æ—Ç–∞ Telegram (–Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥—Ä.).
    """

    @bot.message_handler(func=lambda message: True, content_types=['text'])
    def message_reply(message):
        text = message.text
        cid = message.chat.id
        user_id = message.from_user.id
        markup = types.ReplyKeyboardMarkup(row_width=2)

        try:
            with bot.retrieve_data(user_id, cid) as data:
                target_word = data['target_word']

                if text == target_word:
                    hint = functionality.show_target(data)
                    hint = functionality.show_hint(*["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint])

                else:
                    for btn in buttons[:4]:
                        if btn.text == text:
                            if '‚ùå' not in btn.text:
                                btn.text = text + '‚ùå'

                            hint = functionality.show_hint(*[
                                "–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                                f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}"
                            ])
                            break

            markup.add(*buttons)

            msg = bot.send_message(
                chat_id=cid,
                text=hint,
                reply_markup=markup
            )

            functionality.get_mp3_audio(
                bot=bot,
                data=data,
                hint=hint,
                message=msg
            )

            functionality.get_example(
                bot=bot,
                message=message,
                markup=markup,
                data=data,
                hint=hint
            )

        except (TypeError, KeyError, UnboundLocalError):
            pass


def connect_telebot(repository: DBRepository, token: str) -> None:

    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç—É.

    - repository: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ DBRepository. –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è
                  –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∞—Ç-–±–æ—Ç–∞ Telegram.
    - token_bot: —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç-–±–æ—Ç—É Telegram.
    """

    bot = TeleBot(
        token=token,
        state_storage=StateMemoryStorage()
    )

    start_game_handler(
        bot=bot,
        repository=repository
    )

    delete_word_handler(
        bot=bot,
        repository=repository
    )

    add_word_handler(
        bot=bot,
        repository=repository
    )

    reply_handler(
        bot=bot
    )

    bot.add_custom_filter(
        custom_filter=custom_filters.StateFilter(bot)
    )

    bot.infinity_polling(
        skip_pending=True
    )
